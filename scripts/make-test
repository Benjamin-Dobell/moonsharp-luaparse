#!/usr/bin/env node
/*jshint node:true*/
/*globals console:true */
'use strict';

var fs = require('fs')
  , luaparse = require('../')
  , indent = '  '
  , verbose = true
  , testName
  , snippets = []
  , notifications = [];

// Scaffold the file, with possible description.
function scaffoldFile() {
  var output = '';
  if (testName) output += "describe('" + testName + "', function() {\n";

  // Iterate over all snippets and generate their tests.
  snippets.forEach(function(snippet) {
    // Skip comment lines
    if (/^\/\//.test(snippet)) return;
    output += scaffoldIt(snippet) + "\n";
  });

  if (testName) output += "});";

  return output;
}

// Scaffold an it-test.
function scaffoldIt(snippet) {
  var result = ''
    // The name needs to be escaped as we want to display it.
    , name = snippet.replace(/([\\'])/g, "\\$1")
    , intro = "it('" + name + "', function() {\n"
    , outro = "\n});"
    , assertion
    , success = true
    , exec;

  // The code that actually gets executed, newlines have to be real.
  exec = snippet.replace(/\\n/g, '\n')
    .replace(/\\t/g, '\t')
    .replace(/\\r/g, '\r');

  // Change manual \n strings into real \n chars.
  snippet = snippet
    .replace(/'/g, '\\\'') // escape ' as we use ' as our delimiter
    .replace(/\\([\n\t\r])/, '\\$1');


  // snippet = snippet.replace(/\n/g, '\\n') // escape real \n
  //   .replace(/\t/, '\\t') // replace escaped \t with real
  //   .replace(/\r/, '\\r');

  switch (/-- FAIL\s*$/.test(snippet)) {
    // Failure case
    case true:
      exec = exec.replace(/\s*-- FAIL\s*$/, '');
      snippet = snippet.replace(/\s*-- FAIL\s*$/, '');
      try {
        luaparse.parse(exec);
        // For some reason it didnt throw a error, output the regular assertion
        // but comment on it in the source.
        intro += indent + "// This fails in semantic analysis!\n";
        notifications.push('\x1B[33mExpected failure: \x1B[0m' + name);
        /* falls through */
      } catch (error) {
        assertion = scaffoldThrowAssertion(snippet, error);
        break;
      }
      /* falls through */
    case false:
      // Success case
      try {
        result = JSON.stringify(luaparse.parse(exec), null, indent);
        assertion = scaffoldAssertion(snippet, result);
      } catch (error) {
        notifications.push('\x1B[31m' + error + ':\x1B[0m ' + name);
        success = false;
      }
      break;
  }

  if (verbose && !success) return '';

  return (intro + assertion + outro).replace(/^([\s\S])/gm, indent + "$1");
}

// Scaffold a deep equals assertion.
function scaffoldAssertion(snippet, result) {

  // Remove and store the first line from the result
  var firstline;
  result = result.split('\n');
  firstline = result.splice(0, 1);
  result = result.join('\n');

  // Output \n instead of real newlines in the source passed to the paser.
  // result = result.replace(/\\\\([ntr])/g, '\\$1');

  return indent + "expect(parser.parse('" + snippet + "')).to.deep.equal(" +
    firstline + "\n" + // {
    result.replace(/^([\s\S])/gm, indent + "$1") +
    ");";
}

// Scaffold an expect throw assertion.
function scaffoldThrowAssertion(snippet, error) {
  // Sanitize the error message.
  error = error.message
    .replace(/([\\"])/g, "\\$1")
    .replace(/\n/g, '\\n')
    .replace(/\r/g, '\\r')
    .replace(/\t/g, '\\t');

  return indent + "expect(parser.parse('" + snippet + "', {wait:true}).end).throws(\"" + error + "\");";
}

// Main ---------------------------------------------------

var args = process.argv.splice(2);

if (!args.length) {
  console.log([
      "Usage:"
    , "\tmake-test [snippet|file]..."
    , "\tmake-test \"locale foo = \\\"bar\\\"\""
    , "\tmake-test ./tests"
    , "\nOptions:"
    , "\t--ignore-errors"
  ].join('\n'));
  return;
}

var previous;
args.forEach(function(arg, index) {
  if (/^--ignore-errors/.test(arg)) return verbose = false;

  // Argument flags
  if (/^--name=/.test(arg)) {
    testName = arg.replace(/^--name=/, '');
    return;
  }

  // Snippet
  if (!fs.existsSync(arg)) {
    snippets.push(arg);
  }
  // File
  else {
    fs.readFileSync(arg, 'utf-8')
      .split("\n")
      .forEach(function(snippet) {
        if (!snippet.length) return;
        snippets.push(snippet.replace(/\n$/, ''));
      });
  }
  return;
});

console.log(scaffoldFile());

if (verbose && notifications.length) {
  console.log("\nNotices: \n-----------------------------");
  notifications.forEach(function(notice) {
    console.log(notice);
  });
}

/* vim: set sw=2 ts=2 et tw=80 ft=javascript : */
