#!/usr/bin/env node
/*jshint node:true*/
/*globals console:true */
'use strict';

var fs = require('fs')
  , luaparse = require('../')
  , snippets = process.argv.splice(2)
  , beautify = false
  , quiet = false
  , options = {};

if (!snippets.length || /^(--help|-h|undefined)$/.test(snippets[0])) {
  console.log([
      "Usage: luaparse [option]... [file|snippet]..."
    , "\nOptions:"
    , "  -b|--beautify"
    , "  -q|--quiet"
    , "  --[no]-comments"
    , "  --[no]-scope"
    , "  -h|--help"
    , "\nExamples:"
    , "  luaparse --no-comments \"locale foo = \\\"bar\\\""
    , "  luaparse foo.lua"
  ].join("\n"));
  process.exit(1);
}

snippets.forEach(function(snippet) {
  var match, flag, bool;
  if (match = /^(?:-|--)(?:(no)-)?(\w+)$/.exec(snippet)) {
    bool = 'no' !== match[1];
    flag = match[2];

    switch (flag) {
      case 'b': case 'beautify':
        return beautify = true;
      case 'q': case 'quiet':
        return quiet = true;
      case 'comments': case 'scope':
        return options[flag] = bool;
      default:
        if (!quiet) console.log("Unknown option: %s", match[0]);
        process.exit(1);
        break;
    }
  }

  // This is a file, not a code snippet.
  if (fs.existsSync(snippet)) {
    snippet = fs.readFileSync(snippet, 'utf-8');
  }
  var ast = luaparse.parse(snippet, options);

  if (quiet) return;

  if (beautify) console.log(JSON.stringify(ast, null, '  '));
  else console.log(JSON.stringify(ast));
});

/* vim: set sw=2 ts=2 et tw=80 ft=javascript : */
