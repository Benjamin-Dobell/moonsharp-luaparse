#!/usr/bin/env node
/*jshint node:true*/
/*globals console:true */
'use strict';

var fs = require('fs')
  , luaparse = require('../')
  , args = process.argv.splice(2)
  , stdin = process.stdin
  , beautify = false
  , quiet = false
  , input = ''
  , options = {}
  , snippets = [];

if (/^(--help|-h)$/.test(args[0])) {
  console.log([
      "Usage: luaparse [option]... [file|code]..."
    , "\nOptions:"
    , "  -c|--code [code]"
    , "  -f|--file [file]"
    , "  -b|--beautify"
    , "  -q|--quiet"
    , "  --[no]-comments"
    , "  --[no]-scope"
    , "  -h|--help"
    , "\nExamples:"
    , "  luaparse --no-comments -c \"locale foo = \\\"bar\\\""
    , "  luaparse foo.lua"
  ].join("\n"));
  process.exit(1);
}

for (var i = 0, l = args.length; i < l; i++) {
  var arg = args[i], match, flag, bool, snippet;
  if (match = /^(?:-|--)(?:(no)-)?(\w+)$/.exec(arg)) {
    bool = 'no' !== match[1];
    flag = match[2];

    switch (flag) {
      case 'b': case 'beautify':
        beautify = true;
        continue;
      case 'q': case 'quiet':
        quiet = true;
        continue;
      case 'c': case 'code':
        snippets.push(args[++i]);
        continue;
      case 'f': case 'file':
        snippets.push(fs.readFileSync(args[++i], 'utf-8'));
        continue;
      case 'comments': case 'scope':
        options[flag] = bool;
        continue;
      default:
        if (!quiet) console.log("Unknown option: %s", match[0]);
        process.exit(1);
    }
  }
  // Default to autodetecting code or file.
  snippet = fs.existsSync(arg) ? fs.readFileSync(arg, 'utf-8') : arg;

  snippets.push(snippet);
}

function done() {
  snippets.forEach(function(snippet) {
    var ast = luaparse.parse(snippet, options);

    if (quiet) return;
    if (beautify) console.log(JSON.stringify(ast, null, '  '));
    else console.log(JSON.stringify(ast));
  });
}

if (stdin.isTTY) done();
else {
  // @TODO doesn't work in node 0.9.4-0.9.11 because `end` is never emitted.
  stdin.setEncoding('utf8');
  stdin.on('data', function(chunk) { input += chunk; });
  stdin.on('end', function() { snippets.unshift(input.trim()); done(); });
  stdin.resume();
}


/* vim: set sw=2 ts=2 et tw=80 ft=javascript : */
